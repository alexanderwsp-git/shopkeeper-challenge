<h1>{{ title }}</h1>
<div>
  <label for="startDate">Start Date:</label>
  <input type="date" id="startDate" value="2020-11-01">
  <label for="endDate">End Date:</label>
  <input type="date" id="endDate" value="2021-11-30">
  <button id="fetchData">Fetch Data</button>
</div>
<canvas id="shopkeeperChart" width="95%" height="40%"></canvas>
<h2>Listings Data</h2>
<table id="listingsTable" class="table table-striped table-bordered" style="width:100%">
  <thead>
    <tr>
      <th>Listing ID</th>
      <th>Broker</th>
      <th>Listing Month</th>
      <th>Listing Date</th>
      <th>Revenue</th>
    </tr>
  </thead>
  <tbody id="tableBody">
  </tbody>
  </tbody>
</table>

<script>

  let table = new DataTable('#listingsTable', {
    pageLength: 10,
    paging: true,
    order: [[1, 'asc']],
  });

  const getRandomColor = () => {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  };

  const listingsApiURL = {{{ toJson _ListingsApiURL }}};

  let shopkeeperChart;  // Reference for the Chart.js chart

  // Function to fetch data based on date range
  function fetchData(startDate, endDate) {

    $.ajax({
      url: listingsApiURL,
      type: 'GET',
      data: {
        startDate: startDate,
        endDate: endDate
      },
      success: function (response) {
        table.clear().draw();
        $('#tableBody').empty();
        if (shopkeeperChart) shopkeeperChart.destroy();

        const dataListings = response.listings;


        const brokers = {};
        const labels = new Set();

        dataListings.forEach(item => {
          const monthYear = `${item.month}/${item.year}`;
          labels.add(monthYear);

          $('#tableBody').append(`
              <tr>
                <td>${item.listing_id}</td>
                <td>${item.broker_name}</td>
                <td>${item.month}/${item.year}</td>
                <td>${item.listing_date}</td>
                <td>${item.revenue}</td>
              </tr>
            `);

          if (!brokers[item.broker_name]) {
            brokers[item.broker_name] = {
              label: item.broker_name,
              data: {},
            };
          }

          brokers[item.broker_name].data[monthYear] = brokers[item.broker_name].data[monthYear]
            ? brokers[item.broker_name].data[monthYear] + 1
            : 1;
        });

        table.rows.add($('#tableBody tr')).draw();


        const chartLabels = Array.from(labels).sort((a, b) => {
          const [monthA, yearA] = a.split('/');
          const [monthB, yearB] = b.split('/');
          return new Date(yearA, monthA - 1) - new Date(yearB, monthB - 1);
        });

        const datasets = Object.values(brokers).map(broker => ({
          label: broker.label,
          data: chartLabels.map(label => broker.data[label] || 0),
          borderColor: getRandomColor(),
          fill: false,
        }));

        const ctx = document.getElementById('shopkeeperChart').getContext('2d');
        shopkeeperChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: chartLabels,
            datasets: datasets,
          },
          options: {
            scales: {
              y: { beginAtZero: true },
              x: { type: 'category', labels: chartLabels },

            },
          },
        });
      },
      error: function (err) {
        console.error('Error fetching data:', err);
      }
    });
  };

  fetchData('2020-11-01', '2021-11-30');

  $('#fetchData').on('click', function () {
    const startDate = $('#startDate').val();
    const endDate = $('#endDate').val();
    fetchData(startDate, endDate);  // Fetch data with new dates
  });

</script>